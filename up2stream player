/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.0.0 - @tomw - Initial release.

*/

metadata
{
    definition(name: "up2stream player", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "AudioVolume"
        capability "Configuration"
        capability "Initialize"
        capability "MusicPlayer"
        capability "Refresh"
        capability "SpeechSynthesis"
        //TODO: capability "AudioNotification"
        
        command "executeCommand", ["command"]
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input "IP_address", "text", title: "IP address of up2stream player", required: true
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def installed()
{
    logDebug("up2stream player installed()")
    
    initialize()
}

def initialize()
{
    logDebug("up2stream player initialize()")
    
    sendEvent(name: "commStatus", value: "unknown")
    
    refresh()
    
    // set voice prompts behavior based on debugging state
    setVoicePromptsState()
}

def updated()
{
    logDebug("up2stream player updated()")
    
    configure()
}

def configure()
{
    logDebug("up2stream player configure()")
    
    unschedule()
    state.clear()
    initialize()
}

def refresh()
{
    refresh(false)
}

def refresh(useCachedValues)
{
    logDebug("up2stream player refresh()")
    
    if(null == IP_address)
    {
        return
    }
    
    // unschedule refresh, just in case someone did it directly
    unschedule()
    
    updateStatusEx(useCachedValues)
    updatePlayerStatus(useCachedValues)
    
    updateUriAndDesc(true)
    
    // refresh once per minute
    runIn(60, refresh)
}

def uninstalled()
{
    logDebug("up2stream player uninstalled()")
    
    unschedule()
}

def play()
{
    logDebug("up2stream player play()")
    resume()    
}
    
def resume()
{
    logDebug("up2stream player resume()")
    
    if(httpGetExec("setPlayerCmd:resume"))
    {
        refresh()
    }
}

def pause()
{
    logDebug("up2stream player pause()")
    
    if(httpGetExec("setPlayerCmd:pause"))
    {
        refresh()
    }
}

def stop()
{
    logDebug("up2stream player stop()")
    
    if(httpGetExec("setPlayerCmd:stop"))
    {
        refresh()
    }
}

def mute()
{
    logDebug("up2stream player mute()")
    
    if(httpGetExec("setPlayerCmd:mute:1"))
    {
        refresh()
    }
}

def unmute()
{
    logDebug("up2stream player unmute()")
    
    if(httpGetExec("setPlayerCmd:mute:0"))
    {
        refresh()
    }
}

def setLevel(volumelevel)
{
    logDebug("up2stream player setLevel()")
    
    if(!checkCommStatus())
    {
        refresh()
        return
    }
    
    // bound to [0..100]
    def intVolumeLevel = (volumelevel >= 0) ? ((volumelevel <=100) ? volumelevel : 100) : 0
    
    if(httpGetExec("setPlayerCmd:vol:" + intVolumeLevel))
    {
        refresh()
    }
    
    // mute if new volumelevel is 0
    if(volumelevel <= 0)
    {
        mute()
    }
    else
    {
        unmute()
    }
}

def setVolume(volumelevel)
{
    logDebug("up2stream player setVolume()")
    
    setLevel(volumelevel)
}

def volumeDown()
{
    logDebug("up2stream player volumeDown()")
    
    setLevel(getCurrentVolumeLevel() - 10)
}

def volumeUp()
{
    logDebug("up2stream player volumeUp()")
    
    setLevel(getCurrentVolumeLevel() + 10)
}

def nextTrack()
{
    logDebug("up2stream player nextTrack()")
    
    if(httpGetExec("setPlayerCmd:next"))
    {
        refresh()
    }
}

def previousTrack()
{
    logDebug("up2stream player previousTrack()")
    
    if(httpGetExec("setPlayerCmd:prev"))
    {
        refresh()
    }
}

def playTrack(trackuri)
{
    logDebug("up2stream player playTrack(${trackuri})")
    
    if(httpGetExec("setPlayerCmd:play:${trackuri}"))
    {
        refresh()
    }
}

def restoreTrack(trackuri)
{
    logDebug("up2stream player restoreTrack(${trackuri})")
    
    playTrack(trackuri)
}

def resumeTrack(trackuri)
{
    logDebug("up2stream player resumeTrack(${trackuri})")
    
    playTrack(trackuri)
}

def setTrack(trackuri)
{
    logDebug("up2stream player setTrack(${trackuri})")
    
    // this one is weird.  mute, play track, restore pause or stop, and finally restore mute/unmute
    
    refresh()
    
    if(!checkCommStatus())
    {
        refresh()
        return
    }
    
    def muteStatus = getPlayerStatus().mute
    def playStatus = getPlayerStatus().status.toString()
    
    mute()
    playTrack(trackuri)
    
    switch(playStatus)
    {
        case "paused":
            pause()
            break
        case "stopped":
            stop()
            break
    }
    
    if (!muteStatus.toInteger())
    {
        unmute()
    }
    
    refresh()
}

def playText(text)
{
    logDebug("up2stream player playText(${text})")
    
    playTrack(textToSpeech(text, "Joanna").uri)
}

def speak(text)
{
    logDebug("up2stream player speak(${text})")
    
    playText(text)
}

def executeCommand(suffix)
{
    logDebug("up2stream player executeCommand(${suffix})")
    
    return httpGetExec(suffix)
}

def getBaseURI()
{
    return "http://" + IP_address + "/httpapi.asp?command="
}

def updateStatusEx(useCachedValues)
{
    def resp_json
    
    if(useCachedValues)
    {
        resp_json = getStatusEx()
    }
    else
    {
        resp_json = parseJson(httpGetExec("getStatusEx"))
        if(resp_json)
        {
            setStatusEx(resp_json)
            sendEvent(name: "commStatus", value: "good")
        }
        else
        {
            sendEvent(name: "commStatus", value: "error")
            return
        }
    }
}

def setStatusEx(statusEx)
{
    logDebug("statusEx = ${statusEx}")
    
    state.StatusEx = statusEx
}

def getStatusEx()
{
    return state.StatusEx
}

def updatePlayerStatus(useCachedValues)
{
    def resp_json
    
    if(useCachedValues)
    {
        resp_json = getPlayerStatus()
    }
    else
    {
        resp_json = parseJson(httpGetExec("getPlayerStatus"))
        if(resp_json)
        {
            setPlayerStatus(resp_json)
            sendEvent(name: "commStatus", value: "good")
        }
        else
        {
            sendEvent(name: "commStatus", value: "error")
            return
        }
    }
    
    // update attributes
    sendEvent(name: "level", value: resp_json.vol.toInteger())
    sendEvent(name: "mute", value: (resp_json.mute.toInteger() ? "muted" : "unmuted"))
    
    def tempStatus = ""
    switch(resp_json.status.toString())
    {
        case "stop":
            tempStatus = "stopped"
            break
        case "play":
            tempStatus = "playing"
            break
        case "load":
            tempStatus = "loading"
            break
        case "pause":
            tempStatus = "paused"
            break
    }        
    sendEvent(name: "status", value: tempStatus)
}

def setPlayerStatus(playerStatus)
{
    logDebug("playerStatus = ${playerStatus}")
    
    state.PlayerStatus = playerStatus
}

def getPlayerStatus()
{
    return state.PlayerStatus
}

def getCurrentVolumeLevel()
{
    return getPlayerStatus().vol.toInteger()
}

def setVoicePromptsState()
{
    if(logEnable)
    {
        executeCommand("PromptEnable")
    }
    else
    {
        executeCommand("PromptDisable")
    }
}

def checkCommStatus()
{
    switch(device.currentValue("commStatus"))
    {
        case "good":
            logDebug("checkCommStatus() success")
            return true
        
        case "error":
        case "unknown":
        default:
            logDebug("checkCommStatus() failed")
            return false
    }
}

def updateUriAndDesc(useCachedValues)
{
    if(!useCachedValues)
    {
        refresh()
    }
    
    if(!checkCommStatus())
    {
        return
    }
    
    def tmpTrackData = "uri:${hexToAscii(getPlayerStatus().uri)}"
    def tmpTrackDesc = "${hexToAscii(getPlayerStatus().Title)} by ${hexToAscii(getPlayerStatus().Artist)} from ${hexToAscii(getPlayerStatus().Album)}"
    
    if(getStatusEx().spotify_active == "1")
    {
        tmpTrackData = "uri: N/A"
        tmpTrackDesc = "Controlled by Spotify."
    }
        
    sendEvent(name: "trackData", value: tmpTrackData)
    sendEvent(name: "trackDescription", value: tmpTrackDesc)
}

def updateIP(ip)
{
    if(null == ip)
    {
        device.clearSetting("IP_address")
        return
    }
    
    device.updateSetting("IP_address", ip.toString())
}

def getGroupingDetails()
{
    updateStatusEx(false)
    def statusEx = getStatusEx()
    
    if(null == statusEx)
    {
        logDebug("failed getGroupingDetails().  check connection and IP")
        return
    }
    
    // grouping details:
    // upnp_uuid: UUID from player
    // ssid: SSID from player
    // eth2: ethernet IP (0.0.0.0 if not connected)
    // apcli0: wireless IP
    // strategy: grouping strategy
    // groupIP: device IP once grouped (TBD)
    // name: player name
    // chan: WifiChannel 
    
    def grpStrat = ("0.0.0.0" == statusEx?.eth2) ? "direct" : "router"
    
    return([upnp_uuid: statusEx.upnp_uuid, ssid: statusEx.ssid, eth2: statusEx.eth2, apcli0: statusEx.apcli0, strategy: grpStrat,  groupIP: "", name: statusEx.DeviceName, chan: statusEx.WifiChannel])
}

def hexToAscii(hexStr)
{
    return new String(hubitat.helper.HexUtils.hexStringToByteArray(hexStr))
}

def parseJson(resp)
{
    def jsonSlurper = new groovy.json.JsonSlurper()
    
    try
    {
        resp_json = jsonSlurper.parseText(resp.toString())
        return resp_json
    }
    catch (Exception e)
    {
        log.warn "parse failed: ${e.message}"
        return null
    }
}
        

def httpGetExec(suffix)
{
    logDebug("httpGetExec(${suffix})")
    
    try
    {
        getString = getBaseURI() + suffix
        httpGet(getString.replaceAll(' ', '%20'))
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                return resp.data
            }
        }
    }
    catch (Exception e)
    {
        logDebug("httpGetExec() failed: ${e.message}")
    }
}
